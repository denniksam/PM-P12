Модульне тестування

Випробування частин проєкту (модулів) на працездатність шляхом
їх виконання на множинах тестових даних

Тести частіше за все оформлюються як окремий проєкт, для зв'язку
з основним проєктом слід додати залежність (Dependency)

TDD (Test Driven Development) - підхід до проєктування, за якого
тести передують коду, тобто спочатку створюються тести, а потім
код, який ці тести має пройти. Тести можна розуміти як максимально
уточнене ТЗ.
Наприклад,                   "Hello..."
Ellipsis("Hello, World", 5) < 
  							 "He..."

Основу тестів складають твердження (Asserts).
Тест вважається пройденим, якщо всі твердження виконуються.
Тест провалюється (Fail), якщо хоча б одне не виконується.

Покриття тестами (покриття коду, coverage)
Показник (як правило у відсотках), який характеризує частину (долю)
коду, який бере участь у тестах.
Існує декілька способів обчислення покриття:
- за рядками коду (кількість рядків у тестах / кількість рядків у коді)
   [застарілий, не використовується]
- за класами (за модулями)
   кількість класів, що беруть участь у тестуванні / загальна к-сть класів
   [майже не вживається, але входить до результатів]
- за методами (за функціями)
   [у результаті подається звіт: 83% методів у 81% класів]
- за операторами / операціями
   = інструкція - синтаксично коректний цілісний (неподільний, атомарний)
      вислів мови програмування (часто завершується спецсимволом - ;)
      x += 10;
      y = x > 10 ? 2 : -2;
      if(x<10) Console.Write("Hello");
   = оператор
        інструкція, що не має результату
        if(x<10) Console.Write("Hello");
   = операція
        інструкція, що має результат; може бути присвоєна змінній
        x = (операція)
        x > 10 ? 2 : -2  -- вираз/операція

- покриття шляхів - за відсотком можливих "шляхів" проходження
   умовних операторів (усіх блоків if та else)
- покриття входів - за відсотком можливих вхідних даних

Д.З. Оформити репозиторій з проєктом з
дотриманням необхідних правил як щодо самого репозиторію,
так і до коду в ньому.